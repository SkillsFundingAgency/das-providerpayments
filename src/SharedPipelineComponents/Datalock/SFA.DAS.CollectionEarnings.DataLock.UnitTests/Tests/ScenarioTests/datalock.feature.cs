// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.4.0.0
//      SpecFlow Generator Version:2.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SFA.DAS.CollectionEarnings.DataLock.UnitTests.Tests.ScenarioTests
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Datalock Features")]
    public partial class DatalockFeaturesFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "datalock.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Datalock Features", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The commitment has both a DLOCK_09 and a DLOCK_07 -")]
        public virtual void TheCommitmentHasBothADLOCK_09AndADLOCK_07_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The commitment has both a DLOCK_09 and a DLOCK_07 -", null, ((string[])(null)));
#line 4
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "PriceEpisodeIdentifier",
                        "EpisodeStartDate",
                        "TNPStartDate",
                        "AgreedPrice",
                        "Period",
                        "Prog",
                        "Pathway",
                        "Standard",
                        "Framework",
                        "TT01"});
            table5.AddRow(new string[] {
                        "2-490-1-01/06/2017",
                        "2017-06-01",
                        "2017-06-01",
                        "1950.00",
                        "11",
                        "3",
                        "1",
                        "0",
                        "490",
                        "100"});
            table5.AddRow(new string[] {
                        "2-490-1-01/06/2017",
                        "2017-06-01",
                        "2017-06-01",
                        "1950.00",
                        "11",
                        "3",
                        "1",
                        "0",
                        "490",
                        "100"});
#line 5
 testRunner.Given("I have the following on programme earnings", ((string)(null)), table5, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "CommitmentId",
                        "VersionId",
                        "StartDate",
                        "EndDate",
                        "AgreedCost",
                        "Standard",
                        "Prog",
                        "Framework",
                        "Pathway",
                        "PaymentStatus",
                        "PaymentStatusDescription"});
            table6.AddRow(new string[] {
                        "12526",
                        "2957434-001",
                        "2017-06-10",
                        "2018-06-01",
                        "2000.00",
                        "0",
                        "3",
                        "490",
                        "1",
                        "1",
                        "Active"});
#line 10
 testRunner.And("I have the following commitments", ((string)(null)), table6, "And ");
#line 14
 testRunner.When("I call the service ValidataDatalockForProvider", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 16
 testRunner.Then("I get 1 validation errors in the DataLockValidationResult", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 17
 testRunner.And("The DatalockValidatioResult contains DLOCK_09", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
